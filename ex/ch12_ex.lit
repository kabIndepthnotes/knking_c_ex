@code_type c .c
@comment_type /* %s */
@compiler gcc main.c

@s C programming a mordern approach exercises

--- ch12_ex.c
@{include_directives}
@{define_directives}
@{type_definitions}
@{external_variables}
@{function_prototypes}
int
main(void)
{
	@{initialise_objects}
	return 0;
}

@{function_definitions}
---

@s 1

--- function_prototypes
void ch12_q1();
---

--- function_definitions
void
ch12_q1()
{
	int a[] = {5, 15, 34, 54, 14, 2, 52, 72};
	int *p = &a[1], *q = &a[5];

	/* part a */
	if (*(p+3) != 14) {
		printf("ch12_q1_a is wrong!\n", );
		printf("*(p+3) =%d != 14\n", *(p+3)); /* output 14 */
	}
	else {
		printf("test passed.\n", );
	}

	/* part b */
	if (*(q-3) != 34) {
		printf("ch12_q1_b is wrong!\n", );
		printf("*(q-3) =%d != 34\n", *(q-3)); /* output 34 */
	}
	else {
		printf("test passed.\n", );
	}

	/* part c */
	if ((q-p) != 4) {
		printf("ch12_q1_c is wrong!\n", );
		printf("(q-p) = %d != 4\n", *(q-3));
	}
	else {
		printf("test passed.\n", );
	}
	
	/* part d */
	if ((p < q) != true) {
		printf("ch12_q1_c is wrong!\n", );
		printf("(p < q) = %d != 4\n", *(q-3));
	}
	else {
		printf("test passed.\n", );
	}

	/* part e */
	if ((*p < *q) != false) {
		printf("ch12_q1_c is wrong!\n", );
		printf("(*p < *q) = %d != false\n", *p<*q);
	}
	else {
		printf("test passed.\n", );
	}
	
---

--- include_directives
#include <stdbool.h>
---

@s 2

--- function_prototypes +=
void ch12_q2();
---

--- function_definitions +=
void
ch12_q2()
{
	middle = (low - high) / 2;
}
---

@s 3

--- define_directives
#define N 10
---


--- function_prototypes +=
void ch12_q3();
---

--- function_definitions +=
void
ch12_q3()
{
	int a[N] = {1,2,3,4,5,6,7,8,9,10};
	int *p = &a[0], *q = &a[N-1], temp;
	
	while (p < q) {
		temp = *p;
		*p++ = *q;
		*q-- = temp;
	}
	for (int i = 0; i < N; i++) {
		printf("a[%d] = %d\n", a[i], i);
	}
		/* Answer: {1,10,1,10,1,10,1,10,1,10}; */
}
---

@s q4

--- function_prototypes +=
void ch12_q4();
---

--- function_definitions +=
void
ch12_q4()
{
	
}
---

@s q5

--- function_prototypes +=
void ch12_q5();
---

--- function_definitions +=
void
ch12_q5()
{
	
}
---

@s q6

--- function_prototypes +=
void ch12_q6();
---

--- function_definitions +=
void
ch12_q6()
{
	
}
---

@s q7

--- function_prototypes +=
void ch12_q7();
---

--- function_definitions +=
void
ch12_q7()
{
	
}
---

@s q8

--- function_prototypes +=
void ch12_q8();
---

--- function_definitions +=
void
ch12_q8()
{
	
}
---

@s q9

--- function_prototypes +=
void ch12_q9();
---

--- function_definitions +=
void
ch12_q9()
{
	
}
---

@s q10

--- function_prototypes +=
void ch12_q10();
---

--- function_definitions +=
void
ch12_q10()
{
	
}
---

@s q11

--- function_prototypes +=
void ch12_q11();
---

--- function_definitions +=
void
ch12_q11()
{
	
}
---

@s q12

--- function_prototypes +=
void ch12_q12();
---

--- function_definitions +=
void
ch12_q12()
{
	
}
---

@s q13

--- function_prototypes +=
void ch12_q13();
---

--- function_definitions +=
void
ch12_q13()
{
	
}
---

@s q14

--- function_prototypes +=
void ch12_q14();
---

--- function_definitions +=
void
ch12_q14()
{
	
}
---

@s q15

--- function_prototypes +=
void ch12_q15();
---

--- function_definitions +=
void
ch12_q15()
{
	
}
---

@s q16

--- function_prototypes +=
void ch12_q16();
---

--- function_definitions +=
void
ch12_q16()
{
	
}
---

@s q17

--- function_prototypes +=
void ch12_q17();
---

--- function_definitions +=
void
ch12_q17()
{
	
}
---

@s q18

--- function_prototypes +=
void ch12_q18();
---

--- function_definitions +=
void
ch12_q18()
{
	
}
---

